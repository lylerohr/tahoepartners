<?php

/**
 * @file
 * Create previous and next buttons for all nodes in selected content type.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function pager_for_content_type_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.pager_for_content_type':

      $output = '';
      $output .= '<h3>' . t('About Pager for Content Type') . '</h3>';
      $output .= '<p>' . t('Adds "previous" and "next" navigation buttons to each node of a particular content type.') . '</p>';
      $output .= '<h3>' . t('Usage') . '</h3>';
      $output .= '<dl>';
      $output .= '<dd>' . t('This module provides a custom pager which allows the user to navigate between nodes of a particular content type.') . '</dd>';
      $output .= '</dl>';

      return $output;

  }
}

/**
 * Implements hook_preprocess_page().
 */
function pager_for_content_type_preprocess_node(&$variables) {
  // Nothing to do here if the user is not permitted to access manager links.
  if (!\Drupal::currentUser()
    ->hasPermission('access to pager for content type')
  ) {
    return;
  }

  $node = $variables['node'];
  $node_type = $node->getType();
  $on = \Drupal::config('pager_for_content_type.settings')
    ->get($node_type . '_pager_for_content_type_on');
  if ($on) {
    $pager = pager_for_content_type_get_pager($node_type, $node);
    if ($variables['view_mode'] == 'full') {
      $variables['content']['pager_for_content_type'] = array(
        '#items' => pager_for_content_type_get_pager_items($pager),
        '#attributes' => array('class' => 'pager-for-content-type'),
        '#theme' => 'item_list',
        '#weight' => 10,
      );

    }
  }

  $more_links_count = \Drupal::config('pager_for_content_type.settings')
    ->get($node_type . '_pager_for_content_type_more_links');
  if (!empty($more_links_count)) {
    if ($variables['view_mode'] == 'full') {
      $variables['content']['pager_for_content_type_more_links'] = array(
        '#items' => pager_for_content_type_get_pager_more_links($node, $more_links_count),
        '#attributes' => array('class' => 'pager-for-content-type-more-links'),
        '#theme' => 'item_list',
        '#weight' => 11,
      );
    }
  }
}

/**
 * Select all node's ids fron database and generate $pager array.
 *
 * @param string $node_type
 *   Node type.
 * @param int $node
 *   Current node.
 *
 * @return array
 *   Array of pager.
 */
function pager_for_content_type_get_pager($node_type, $node) {
  $pager = array();
  if (\Drupal::currentUser()->hasPermission('access content')) {

    $db = \Drupal::database();

    $query = $db->select('node_field_data', 'n');
    $query->condition('n.type', $node_type, '=')
      ->condition('n.status', '1', '=')
      ->fields('n', array('nid'))
      ->addTag('node_access');
    $query->range(0, 1);

    // next.
    $next_query = clone $query;
    $next_query->condition('n.created', $node->getCreatedTime(), '>')
      ->orderBy('n.created', 'ASC');

    // prev.
    $prev_query = clone $query;
    $prev_query->condition('n.created', $node->getCreatedTime(), '<')
      ->orderBy('n.created', 'DESC');

    // hook_pager_for_content_type_query_alter.
    \Drupal::moduleHandler()
      ->alter("pager_for_content_type_query", $node, $prev_query, $next_query);

    $pager['next_nid'] = $next_query->execute()->fetchField();
    $pager['prev_nid'] = $prev_query->execute()->fetchField();
  }

  return $pager;
}

/**
 * Get pager items function.
 *
 * @param array $pager
 *   Pager array.
 *
 * @return array
 *   Pager items.
 */
function pager_for_content_type_get_pager_items($pager) {
  $pager_next = (isset($pager['next_nid'])) ? $pager['next_nid'] : NULL;
  $pager_prev = (isset($pager['prev_nid'])) ? $pager['prev_nid'] : NULL;

  $items = array();
  if (!empty($pager_next) || !empty($pager_prev)) {

    $pager_for_content_type_previous_text = \Drupal::config('pager_for_content_type.settings')
      ->get('pager_for_content_type_previous_text');
    $pager_for_content_type_next_text = \Drupal::config('pager_for_content_type.settings')
      ->get('pager_for_content_type_next_text');

    $li_previous = NULL;
    if ($pager_prev) {
      $link = Link::fromTextAndUrl($pager_for_content_type_previous_text, Url::fromUri('internal:/node/' . $pager_prev));
      $link->getUrl()->setOption('attributes', ['class' => 'prev']);
      $li_previous = $link->toString();
    }

    $li_next = NULL;
    if ($pager_next) {
      $link = Link::fromTextAndUrl($pager_for_content_type_next_text, Url::fromUri('internal:/node/' . $pager_next));
      $link->getUrl()->setOption('attributes', ['class' => 'next']);
      $li_next = $link->toString();
    }

    if ($li_previous) {
      $items[] = array(
        '#wrapper_attributes' => array('class' => array('pager-previous')),
        '#markup' => $li_previous,
      );
    }

    if ($li_next) {
      $items[] = array(
        '#wrapper_attributes' => array('class' => array('pager-next')),
        '#markup' => $li_next,
      );
    }
  }

  return $items;
}

/**
 * Get more links for pager for content type.
 *
 * @param array $node
 *   Node array.
 * @param int $more_links_count
 *   Count of links.
 *
 * @return array
 *   More links.
 */
function pager_for_content_type_get_pager_more_links($node, $more_links_count) {
  $items = array();

  if (\Drupal::currentUser()->hasPermission('access content')) {

    $db = \Drupal::database();

    $query = $db->select('node_field_data', 'n');
    $query->condition('n.type', $node->getType(), '=')
      ->condition('n.status', '1', '=')
      ->fields('n', array('nid', 'title'))
      ->addTag('node_access');
    $query->range(0, $more_links_count / 2);

    // next.
    $next_query = clone $query;
    $next_query->condition('n.created', $node->getCreatedTime(), '>')
      ->orderBy('n.created', 'ASC');

    // prev.
    $prev_query = clone $query;
    $prev_query->condition('n.created', $node->getCreatedTime(), '<')
      ->orderBy('n.created', 'DESC');

    // hook_pager_for_content_type_query_alter.
    \Drupal::moduleHandler()
      ->alter("pager_for_content_type_more_links_query", $node, $prev_query, $next_query);

    $next_query_count = clone $next_query;
    $prev_count_count = clone $prev_query;

    $next_count = $next_query_count->countQuery()->execute()->fetchField();
    $prev_count = $prev_count_count->countQuery()->execute()->fetchField();

    if ($prev_count < ($more_links_count / 2)) {
      $next_count = $more_links_count - $prev_count;
    }

    if ($next_count < ($more_links_count / 2)) {
      $prev_count = $more_links_count - $next_count;
    }

    $next_query->range(0, $next_count);
    $prev_query->range(0, $prev_count);

    $next = $next_query->execute()->fetchAllKeyed();

    $prev = $prev_query->execute()->fetchAllKeyed();
    $prev = array_reverse($prev, TRUE);
    $links = $prev + $next;
    foreach ($links as $nid => $title) {
      $items[] = array(
        '#wrapper_attributes' => array('class' => array('pager-for-content-type-more-links-item')),
        '#markup' => Link::fromTextAndUrl($title, Url::fromUri('internal:/node/' . $nid))
          ->toString(),
      );
    }
  }

  return $items;
}

/**
 * Implements hook_pager_for_content_type_query_alter().
 */
function pager_for_content_type_pager_for_content_type_query_alter(&$node, &$prev_query, &$next_query) {
  $filter_by_author = \Drupal::config('pager_for_content_type.settings')
    ->get($node->getType() . '_pager_for_content_type_author');

  if (!empty($filter_by_author)) {
    $prev_query->condition('n.uid', $node->getOwnerId(), '=');
    $next_query->condition('n.uid', $node->getOwnerId(), '=');
  }
}

/**
 * Implements hook_pager_for_content_type_query_alter().
 */
function pager_for_content_type_pager_for_content_type_more_links_query_alter(&$node, &$prev_query, &$next_query) {
  $filter_by_author = \Drupal::config('pager_for_content_type.settings')
    ->get($node->getType() . '_pager_for_content_type_author');

  if (!empty($filter_by_author)) {
    $prev_query->condition('n.uid', $node->getOwnerId(), '=');
    $next_query->condition('n.uid', $node->getOwnerId(), '=');
  }
}
